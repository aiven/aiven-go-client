package convert

import (
	"testing"

	"github.com/aiven/aiven-go-client"
	"github.com/aiven/aiven-go-client/tools/exp/types"
	"github.com/google/go-cmp/cmp"
)

// TestUserConfigSchema tests the UserConfigSchema function.
func TestUserConfigSchema(t *testing.T) {
	type args struct {
		v aiven.UserConfigSchema
	}

	tests := []struct {
		name    string
		args    args
		want    *types.UserConfigSchema
		wantErr error
	}{
		{
			name: "basic",
			args: args{
				v: aiven.UserConfigSchema{
					Title:                "",
					Description:          "",
					Type:                 nil,
					Default:              nil,
					Properties:           nil,
					AdditionalProperties: nil,
					Items:                nil,
					OneOf:                nil,
					Enum:                 nil,
					Minimum:              0,
					Maximum:              0,
					MinLength:            0,
					MaxLength:            0,
					MaxItems:             0,
					CreateOnly:           false,
					Pattern:              "",
					Example:              nil,
					UserError:            "",
				},
			},
			want: &types.UserConfigSchema{
				UserConfigSchemaDeprecationInfo: types.UserConfigSchemaDeprecationInfo{},
				Title:                           "",
				Description:                     "",
				Type:                            nil,
				Default:                         nil,
				Properties:                      nil,
				Items:                           nil,
				OneOf:                           nil,
				Enum:                            nil,
				Minimum:                         0,
				Maximum:                         0,
				MinLength:                       0,
				MaxLength:                       0,
				MaxItems:                        0,
				CreateOnly:                      false,
				Pattern:                         "",
				Example:                         nil,
				UserError:                       "",
			},
			wantErr: nil,
		},
		{
			name: "filled",
			args: args{
				v: aiven.UserConfigSchema{
					Title:       "",
					Description: "",
					Type:        "object",
					Properties: map[string]aiven.UserConfigSchema{
						"max_partition_contexts": {
							Title:                "Maximum number of partition contexts to send",
							Description:          "",
							Type:                 "integer",
							Default:              nil,
							Properties:           nil,
							AdditionalProperties: nil,
							Items:                nil,
							OneOf:                nil,
							Enum:                 nil,
							Minimum:              200,
							Maximum:              200000,
							MinLength:            0,
							MaxLength:            0,
							MaxItems:             0,
							CreateOnly:           false,
							Pattern:              "",
							Example:              "32000",
							UserError:            "",
						},
						"site": {
							Title:                "Datadog intake site. Defaults to datadoghq.com",
							Description:          "",
							Type:                 "string",
							Default:              nil,
							Properties:           nil,
							AdditionalProperties: nil,
							Items:                nil,
							OneOf:                nil,
							Enum: []interface{}{
								"datadoghq.com",
								"datadoghq.eu",
							},
							Minimum:    0,
							Maximum:    0,
							MinLength:  0,
							MaxLength:  0,
							MaxItems:   0,
							CreateOnly: false,
							Pattern:    "",
							Example:    "datadoghq.com",
							UserError:  "",
						},
						"datadog_api_key": {
							Title:                "Datadog API key",
							Description:          "",
							Type:                 "string",
							Default:              nil,
							Properties:           nil,
							AdditionalProperties: nil,
							Items:                nil,
							OneOf:                nil,
							Enum:                 nil,
							Minimum:              0,
							Maximum:              0,
							MinLength:            0,
							MaxLength:            0,
							MaxItems:             0,
							CreateOnly:           false,
							Pattern:              "^[A-Za-z0-9]{32}$",
							Example:              "848f30907c15c55d601fe45487cce9b6",
							UserError:            "Must consist of alpha-numeric characters and contain 32 characters",
						},
						"datadog_tags": {
							Title:                "Custom tags provided by user",
							Description:          "",
							Type:                 "array",
							Default:              nil,
							Properties:           nil,
							AdditionalProperties: nil,
							Items:                nil,
							OneOf:                nil,
							Enum:                 nil,
							Minimum:              0,
							Maximum:              0,
							MinLength:            0,
							MaxLength:            0,
							MaxItems:             0,
							CreateOnly:           false,
							Pattern:              "",
							Example: []interface{}{
								map[string]interface{}{"tag": "foo"},
								map[string]interface{}{
									"comment": "Useful tag",
									"tag":     "bar:buzz",
								},
							},
							UserError: "",
						},
						"disable_consumer_stats": {
							Title:                "Disable consumer group metrics",
							Description:          "",
							Type:                 "boolean",
							Default:              nil,
							Properties:           nil,
							AdditionalProperties: nil,
							Items:                nil,
							OneOf:                nil,
							Enum:                 nil,
							Minimum:              0,
							Maximum:              0,
							MinLength:            0,
							MaxLength:            0,
							MaxItems:             0,
							CreateOnly:           false,
							Pattern:              "",
							Example:              true,
							UserError:            "",
						},
						"kafka_consumer_check_instances": {
							Title:                "Number of separate instances to fetch kafka consumer statistics with",
							Description:          "",
							Type:                 "integer",
							Default:              nil,
							Properties:           nil,
							AdditionalProperties: nil,
							Items:                nil,
							OneOf:                nil,
							Enum:                 nil,
							Minimum:              1,
							Maximum:              100,
							MinLength:            0,
							MaxLength:            0,
							MaxItems:             0,
							CreateOnly:           false,
							Pattern:              "",
							Example:              "8",
							UserError:            "",
						},
						"kafka_consumer_stats_timeout": {
							Title:                "Number of seconds that datadog will wait to get consumer statistics from brokers",
							Description:          "",
							Type:                 "integer",
							Default:              nil,
							Properties:           nil,
							AdditionalProperties: nil,
							Items:                nil,
							OneOf:                nil,
							Enum:                 nil,
							Minimum:              2,
							Maximum:              600,
							MinLength:            0,
							MaxLength:            0,
							MaxItems:             0,
							CreateOnly:           false,
							Pattern:              "",
							Example:              "60",
							UserError:            "",
						},
					},
					AdditionalProperties: false,
					Items:                nil,
					OneOf:                nil,
					Enum:                 nil,
					Minimum:              0,
					Maximum:              0,
					MinLength:            0,
					MaxLength:            0,
					MaxItems:             0,
					CreateOnly:           false,
					Pattern:              "",
					Example:              nil,
					UserError:            "",
				},
			},
			want: &types.UserConfigSchema{
				UserConfigSchemaDeprecationInfo: types.UserConfigSchemaDeprecationInfo{},
				Title:                           "",
				Description:                     "",
				Type:                            "object",
				Default:                         nil,
				Properties: map[string]types.UserConfigSchema{
					"datadog_api_key": {
						UserConfigSchemaDeprecationInfo: types.UserConfigSchemaDeprecationInfo{},
						Title:                           "Datadog API key",
						Description:                     "",
						Type:                            "string",
						Default:                         nil,
						Properties:                      nil,
						Items:                           nil,
						OneOf:                           nil,
						Enum:                            nil,
						Minimum:                         0,
						Maximum:                         0,
						MinLength:                       0,
						MaxLength:                       0,
						MaxItems:                        0,
						CreateOnly:                      false,
						Pattern:                         "^[A-Za-z0-9]{32}$",
						Example:                         "848f30907c15c55d601fe45487cce9b6",
						UserError:                       "Must consist of alpha-numeric characters and contain 32 characters",
					},
					"datadog_tags": {
						UserConfigSchemaDeprecationInfo: types.UserConfigSchemaDeprecationInfo{},
						Title:                           "Custom tags provided by user",
						Description:                     "",
						Type:                            "array",
						Default:                         nil,
						Properties:                      nil,
						Items:                           nil,
						OneOf:                           nil,
						Enum:                            nil,
						Minimum:                         0,
						Maximum:                         0,
						MinLength:                       0,
						MaxLength:                       0,
						MaxItems:                        0,
						CreateOnly:                      false,
						Pattern:                         "",
						Example: []interface{}{
							map[string]interface{}{"tag": "foo"},
							map[string]interface{}{
								"comment": "Useful tag",
								"tag":     "bar:buzz",
							},
						},
						UserError: "",
					},
					"disable_consumer_stats": {
						UserConfigSchemaDeprecationInfo: types.UserConfigSchemaDeprecationInfo{},
						Title:                           "Disable consumer group metrics",
						Description:                     "",
						Type:                            "boolean",
						Default:                         nil,
						Properties:                      nil,
						Items:                           nil,
						OneOf:                           nil,
						Enum:                            nil,
						Minimum:                         0,
						Maximum:                         0,
						MinLength:                       0,
						MaxLength:                       0,
						MaxItems:                        0,
						CreateOnly:                      false,
						Pattern:                         "",
						Example:                         true,
						UserError:                       "",
					},
					"kafka_consumer_check_instances": {
						UserConfigSchemaDeprecationInfo: types.UserConfigSchemaDeprecationInfo{},
						Title:                           "Number of separate instances to fetch kafka consumer statistics with",
						Description:                     "",
						Type:                            "integer",
						Default:                         nil,
						Properties:                      nil,
						Items:                           nil,
						OneOf:                           nil,
						Enum:                            nil,
						Minimum:                         1,
						Maximum:                         100,
						MinLength:                       0,
						MaxLength:                       0,
						MaxItems:                        0,
						CreateOnly:                      false,
						Pattern:                         "",
						Example:                         "8",
						UserError:                       "",
					},
					"kafka_consumer_stats_timeout": {
						UserConfigSchemaDeprecationInfo: types.UserConfigSchemaDeprecationInfo{},
						Title:                           "Number of seconds that datadog will wait to get consumer statistics from brokers",
						Description:                     "",
						Type:                            "integer",
						Default:                         nil,
						Properties:                      nil,
						Items:                           nil,
						OneOf:                           nil,
						Enum:                            nil,
						Minimum:                         2,
						Maximum:                         600,
						MinLength:                       0,
						MaxLength:                       0,
						MaxItems:                        0,
						CreateOnly:                      false,
						Pattern:                         "",
						Example:                         "60",
						UserError:                       "",
					},
					"max_partition_contexts": {
						UserConfigSchemaDeprecationInfo: types.UserConfigSchemaDeprecationInfo{},
						Title:                           "Maximum number of partition contexts to send",
						Description:                     "",
						Type:                            "integer",
						Default:                         nil,
						Properties:                      nil,
						Items:                           nil,
						OneOf:                           nil,
						Enum:                            nil,
						Minimum:                         200,
						Maximum:                         200000,
						MinLength:                       0,
						MaxLength:                       0,
						MaxItems:                        0,
						CreateOnly:                      false,
						Pattern:                         "",
						Example:                         "32000",
						UserError:                       "",
					},
					"site": {
						UserConfigSchemaDeprecationInfo: types.UserConfigSchemaDeprecationInfo{},
						Title:                           "Datadog intake site. Defaults to datadoghq.com",
						Description:                     "",
						Type:                            "string",
						Default:                         nil,
						Properties:                      nil,
						Items:                           nil,
						OneOf:                           nil,
						Enum: []types.UserConfigSchemaEnumValue{
							{Value: "datadoghq.com"},
							{Value: "datadoghq.eu"},
						},
						Minimum:    0,
						Maximum:    0,
						MinLength:  0,
						MaxLength:  0,
						MaxItems:   0,
						CreateOnly: false,
						Pattern:    "",
						Example:    "datadoghq.com",
						UserError:  "",
					},
				},
				Items:      nil,
				OneOf:      nil,
				Enum:       nil,
				Minimum:    0,
				Maximum:    0,
				MinLength:  0,
				MaxLength:  0,
				MaxItems:   0,
				CreateOnly: false,
				Pattern:    "",
				Example:    nil,
				UserError:  "",
			},
			wantErr: nil,
		},
		{
			name: "basic",
			args: args{
				v: aiven.UserConfigSchema{
					Title:                "",
					Description:          "",
					Type:                 nil,
					Default:              nil,
					Properties:           nil,
					AdditionalProperties: nil,
					Items:                nil,
					OneOf:                nil,
					Enum:                 nil,
					Minimum:              0,
					Maximum:              0,
					MinLength:            0,
					MaxLength:            0,
					MaxItems:             0,
					CreateOnly:           false,
					Pattern:              "",
					Example:              nil,
					UserError:            "",
				},
			},
			want: &types.UserConfigSchema{
				UserConfigSchemaDeprecationInfo: types.UserConfigSchemaDeprecationInfo{},
				Title:                           "",
				Description:                     "",
				Type:                            nil,
				Default:                         nil,
				Properties:                      nil,
				Items:                           nil,
				OneOf:                           nil,
				Enum:                            nil,
				Minimum:                         0,
				Maximum:                         0,
				MinLength:                       0,
				MaxLength:                       0,
				MaxItems:                        0,
				CreateOnly:                      false,
				Pattern:                         "",
				Example:                         nil,
				UserError:                       "",
			},
			wantErr: nil,
		},
	}

	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := UserConfigSchema(tt.args.v)
			if !cmp.Equal(err, tt.wantErr) {
				t.Errorf("UserConfigSchema() error = %v, wantErr %v", err, tt.wantErr)
				return
			}

			if !cmp.Equal(got, tt.want) {
				t.Errorf("UserConfigSchema() = %v, want %v", got, tt.want)
			}
		})
	}
}
