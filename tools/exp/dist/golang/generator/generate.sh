#!/bin/bash

GOJSON=./bin/gojson
if ! command -v $GOJSON &> /dev/null; then
    if ! go build -o $GOJSON github.com/ChimeraCoder/gojson/gojson; then
        echo "failed to build gojson"
        exit 1
    fi
    echo -e "gojson has been built\n"
fi

DIST_DIR=../../
OUT_DIR=../

FILE_NAMES=("service_types" "integration_types" "integration_endpoint_types")
STRUCT_NAMES=("ServiceTypes" "IntegrationTypes" "IntegrationEndpointTypes")

IMPORTS=$(cat <<EOF
import (
	"bytes"

	"github.com/aiven/aiven-go-client/tools/exp/dist"
	"gopkg.in/yaml.v3"
)
EOF
)
IMPORTS=$(echo "$IMPORTS" | sed -e 's/[\/&]/\\&/g' | awk -v ORS='\\n' "1" | sed -z '$ s/\\n$//')

GETTER=$(cat <<EOF
// FilledSTRUCT_NAME is a function that returns STRUCT_NAME filled with generated data.
func FilledSTRUCT_NAME() *STRUCT_NAME {
	d := yaml.NewDecoder(bytes.NewReader(dist.STRUCT_NAME))

	r := &STRUCT_NAME{}

	if err := d.Decode(r); err != nil {
		panic(err)
	}

	return r
}
EOF
)

for i in "${!FILE_NAMES[@]}"; do
    FILE_NAME=${FILE_NAMES[$i]}
    STRUCT_NAME=${STRUCT_NAMES[$i]}
    GETTER_NAME=Filled${STRUCT_NAME}

    echo "generating ${FILE_NAME}.go (struct ${STRUCT_NAME})"

    if ! ${GOJSON} -fmt yaml -input ${DIST_DIR}/"${FILE_NAME}".yml -name "${STRUCT_NAME}" -o ${OUT_DIR}/"${FILE_NAME}".go -pkg golang; then
        echo "failed to convert ${FILE_NAME}.yml to ${FILE_NAME}.go (struct ${STRUCT_NAME})"
        exit 1
    fi
    echo "converted ${FILE_NAME}.yml to ${FILE_NAME}.go (struct ${STRUCT_NAME})"

    echo -e "// Code generated by gojson. DO NOT EDIT.\n\n$(cat ${OUT_DIR}/"${FILE_NAME}".go)" > ${OUT_DIR}/"${FILE_NAME}".go
    echo "[${FILE_NAME}.go] added code generation comment"

    sed -i "s/package golang/package golang\n\n$IMPORTS/" ${OUT_DIR}/"${FILE_NAME}".go
    echo "[${FILE_NAME}.go] added imports"

    sed -i "s/type $STRUCT_NAME struct/\/\/ $STRUCT_NAME is a generated type that represents ${FILE_NAME}.yml.\ntype $STRUCT_NAME struct/" ${OUT_DIR}/"${FILE_NAME}".go
    echo "[${FILE_NAME}.go] added comment to struct"

    echo -e "\n$GETTER" | sed "s/STRUCT_NAME/$STRUCT_NAME/g" >> ${OUT_DIR}/"${FILE_NAME}".go
    echo "[${FILE_NAME}.go] added getter function ${GETTER_NAME}"

    echo -e "generated ${FILE_NAME}.go (struct ${STRUCT_NAME})\n"
done
